[
{
	"uri": "http://localhost:1313/general/tuttle/",
	"title": "What is Tuttle?",
	"tags": ["git", "tuttle"],
	"description": "",
	"content": "Tuttle is an eXist-db application that adds version control to data collections in eXist-db.\nIt is part of and published by the e-editiones society and can be used by other eXist-db applications such as TEI-Publisher to synchronize data collections between the database and a Git repository.\nTuttle wraps the APIs of the Git service providers under a single, common OpenAPI allowing projects to seemlessly add version control to their data.\n"
},
{
	"uri": "http://localhost:1313/general/",
	"title": "Get started",
	"tags": [],
	"description": "",
	"content": " "
},
{
	"uri": "http://localhost:1313/general/requirements/",
	"title": "What is needed to use Tuttle?",
	"tags": ["requirements", "setup", "Github", "Gitlab"],
	"description": "",
	"content": "1. Access to a repository To use Tuttle access to a repository on Github or Gitlab is necessary. This can be public or private repositories. On-premise servers will of course also work.\n2. Tuttle application You can install the Tuttle application from the eXist-db public repository by using the eXist-db Dashboard.\n3. Access token In order to authenticate to the VCS (version control system) and being allowed to access its API a \u0026lsquo;personal access token\u0026rsquo; is needed. This can be obtained from the respective service-provider.\nSee \u0026lsquo;how to get an auth token\u0026rsquo;\n4. TEI-Publisher Tuttle is integrated with TEI-Publisher. In order to use it a TEI-Publisher instance is required.\n5. Data collection The data collection that is referred to in the Tuttle configuration must exist (even if empty) before you can deploy data to it. Otherwise Tuttle will fail to deploy the data.\n"
},
{
	"uri": "http://localhost:1313/faq/types/",
	"title": "Which Git providers are supported?",
	"tags": ["git", "tuttle", "github", "gitlab"],
	"description": "",
	"content": "Tuttle supports either Github and Gitlab repositories.\n"
},
{
	"uri": "http://localhost:1313/",
	"title": "Frequently Asked Questions",
	"tags": [],
	"description": "",
	"content": "Frequently Asked Questions This website collects frequently asked questions around TEI Publisher, TEI encoding, text editing and development workflows.\nHow to contribute to this FAQ Proposing new entries If you\u0026rsquo;d like to propose an entry not having it all prepared yet, please consider creating a ticket in the issue tracker. You can suggest a topic, solicit opinions and also subsequently collaborate and discuss the shape of the corresponding article in there.\nThe website is directly generated from the markdown files stored in the content subdirectory of the github repository. All contributions are welcome.\nQuick edits via GitHub You can make changes to any existing page by clicking on the Edit this page link at the top right of the page. All you need is a GitHub user account. Clicking the link will open the corresponding markdown file on github for editing and you can start applying your changes immediately.\nTo add new files, navigate to the correct subdirectory in the github repository and press the Add file button on the top right above the directory listing. Files should be markdown, i.e. the file name must end with .md.\nOnce you are done with editing, fill out the Propose changes form at the bottom of the page and click the green button. Changes will not go live immediately. Instead, you are asked to create a so called pull request, which will then be reviewed by a core team member. You do not need to fill out anything if you already provided a description of your changes, so just press the green Create pull request button (also on the followup page).\nTo work on larger, new articles we recommend to write your text offline first in an editor of your choice. Most text editors (including oXygen) provide some support for writing markdown. You can then upload your new file using Add files (see above).\nForking the repo To work on more than just one article at a time, it is better to fork the faq repository and clone it to your local machine. Once you\u0026rsquo;re done, commit the changes to your fork and open a pull request on the source repository.\nTo preview your changes locally, you need to install a software package called hugo. Next, clone the repository to your local machine, cd into it and run the following command once to load the require theme for the FAQ:\ngit submodule update --init --recursive You may then start a local hugo server with\nhugo server "
},
{
	"uri": "http://localhost:1313/general/configuration/",
	"title": "How to configure Tuttle?",
	"tags": ["git", "tuttle", "github", "gitlab", "configuration"],
	"description": "",
	"content": "Tuttle is configured in modules/config.xqm in your Tuttle installation.\nYou may use eXide to edit the config.xqm.\nBelow is an example configuration that shows an example for either Github and Gitlab. Due to the different API of these services the configuration differs sligtly. See parameter description below.\n(:~ : Git configuration :) declare variable $config:collections := map { \u0026quot;sample-collection-github\u0026quot; : map { \u0026quot;vcs\u0026quot; : \u0026quot;github\u0026quot;, \u0026quot;baseurl\u0026quot; : \u0026quot;https://api.github.com/\u0026quot;, \u0026quot;ref\u0026quot; : \u0026quot;master\u0026quot;, \u0026quot;token\u0026quot; : \u0026quot;146152be6a9xxxxxxxxxxx71da8f3e4faf263\u0026quot;, \u0026quot;hookuser\u0026quot; : \u0026quot;admin\u0026quot;, \u0026quot;hookpasswd\u0026quot; : \u0026quot;\u0026quot; \u0026quot;owner\u0026quot; : \u0026quot;Jinntec\u0026quot;, \u0026quot;repo\u0026quot; : \u0026quot;tuttle-demo\u0026quot; }, \u0026quot;sample-collection-gitlab\u0026quot; : map { \u0026quot;vcs\u0026quot; : \u0026quot;gitlab\u0026quot;, \u0026quot;baseurl\u0026quot; : \u0026quot;https://gitlab.com/api/v4/\u0026quot;, \u0026quot;ref\u0026quot; : \u0026quot;master\u0026quot;, \u0026quot;token\u0026quot; : \u0026quot;9vq6jmzxxxxxxxxxxobUfoM\u0026quot;, \u0026quot;hookuser\u0026quot; : \u0026quot;admin\u0026quot;, \u0026quot;hookpasswd\u0026quot; : \u0026quot;\u0026quot;, \u0026quot;project-id\u0026quot; : \u0026quot;25852323\u0026quot; } }; Common configuration parameters    Configuration Parameter Description     vcs can be either \u0026lsquo;github\u0026rsquo; or \u0026lsquo;gitlab\u0026rsquo; and signifies the type of repository   baseurl the base URL of the Git Service e.g. \u0026lsquo;https://api.github.com   ref the name of the branch to use   token the authorization token for the Git service. This needs to be obtained for the respective service prior to operation.   hookuser the user name used to talk to the service.   hookpasswd the password for the hookuser    Github    Configuration Parameter Description     owner the owning organisation in Github   repo the repository name within the organisation    The baseurl plus the above parameters are used to construct the URL to access the Github repository.\nGitlab    Configuration Parameter Description     project-id Gitlab identifier for the repository. Gitlab is using this id when being accessed via its API. It is listed on the homepage of the repository.    baseurl plus project-id are used to construct the URL to access the Gitlab repository.\n"
},
{
	"uri": "http://localhost:1313/faq/multiple/",
	"title": "Can i have multiple repositories?",
	"tags": ["git", "repository", "Github", "Gitlab"],
	"description": "",
	"content": "Yes. It\u0026rsquo;s possible to configure multiple repositories even of different types.\nSo for instance you can have one Gitlab repository connected to one target collection in the database and another collection that is bound to a Github repository somewhere else.\nEach configuration item will correspond to exactly one target collection. However target collections must not be nested as that would cause trouble.\n"
},
{
	"uri": "http://localhost:1313/faq/limitations/",
	"title": "What are the limitations?",
	"tags": ["git", "tuttle", "limitations"],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/general/use/",
	"title": "how to use Tuttle?",
	"tags": [],
	"description": "",
	"content": " in the pictures below the Github Logo is used but Gitlab can be used the same way\n Git as the \u0026lsquo;source of truth\u0026rsquo; With \u0026lsquo;Git to DB\u0026rsquo; editors will work with their own tools and push changes to Git. The data are kept in Git and are deployed to TEI-Publisher on demand or automatically by an Git action. Data can be updated completely or incrementally just applying the changes since last update.\nThere is a simple dashboard to trigger the updating of data and checking the status of connected repositories.\nWhen opening the dashboard the status of the configured repositories is requested. The colors of of the rows signal the status of the respective repository.\n   color Status     orange new - the repository is configured but has not yet been deployed into TEI-Publisher. The \u0026lsquo;incremental\u0026rsquo; button is disabled as the data need to be checked out before.   green up-to-date - the are no differences between data in the database and the repository. \u0026lsquo;Incremental\u0026rsquo; can be used to trigger update of differences.   blue behind - the data in the database are behind the status in the repository. An update is needed   red error - a configuration or connection problem occured    "
},
{
	"uri": "http://localhost:1313/tags/git/",
	"title": "git",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/tags/tuttle/",
	"title": "tuttle",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/tags/github/",
	"title": "Github",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/tags/gitlab/",
	"title": "Gitlab",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/tags/requirements/",
	"title": "requirements",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/tags/setup/",
	"title": "setup",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/tags/repository/",
	"title": "repository",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/tags/authentication/",
	"title": "Authentication",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/faq/auth/",
	"title": "How to get an auth token",
	"tags": ["Github", "Gitlab", "Authentication"],
	"description": "",
	"content": "Please refer to the respective documention.\nGithub - creating a personal access token\nGitlab - Personal access tokens\n"
},
{
	"uri": "http://localhost:1313/faq/",
	"title": "Frequently Asked Questions",
	"tags": [],
	"description": "",
	"content": "using \u0026lsquo;Tuttle\u0026rsquo; - the Git version control extension This chapter is about \u0026lsquo;Tuttle\u0026rsquo;, the Git version control extension of TEI-Publisher.\n "
},
{
	"uri": "http://localhost:1313/tags/configuration/",
	"title": "configuration",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/tags/limitations/",
	"title": "limitations",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
}]